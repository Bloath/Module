/* Includes ------------------------------------------------------------------*/
#include "../Sys_Conf.h"
#include "../ZcProtocol/ZcProtocol_API.h"
#include "../ZcProtocol/ZcProtocol.h"
#include "../ZcProtocol/ZcProtocol_Handle.h"
#include "../Common/Convert.h"
#include "../Common/Delay.h"
#include "../DataStruct/DataStruct.h"
#include "Communicate_API.h"

#include "../../Handle/Global.h"
/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro --------------------------------------------------------------*/
/* Private variables ----------------------------------------------------------*/
/* Private function prototypes ------------------------------------------------*/
/*********************************************************************************************

  * @brief  填充轮询报文
  * @param  
  * @retval 
  * @remark 

  ********************************************************************************************/
void CallBack_HD_FillPollingPackt(CommunicateStruct *communicate)
{
    if (communicate->medium == COM_NET)
    {
        ZcProtocol_Request(communicate, 00, NULL, 0, false, TX_MULTI_MC);
    }

    if (communicate->medium == COM_485)
    {
        ZcProtocol_Request(communicate, 00, NULL, 0, false, TX_MULTI_AC);
    }
}
/*********************************************************************************************

  * @brief  报文检查
  * @param  mesasge：报文指针
            len：报文长度
  * @retval 
  * @remark 

  ********************************************************************************************/
bool CallBack_MessageInspect(uint8_t *message, uint16_t len, CommunicateStruct *communicate)
{
    return (ZcProtocol_Check(message, len) == NULL) ? false : true;
}
/*********************************************************************************************

  * @brief  清除发送缓冲
  * @param  mesasge：报文指针
            len：报文长度
            communicate：通讯实例
  * @retval 
  * @remark 

  ********************************************************************************************/
void CallBack_ClearTxQueue(uint8_t *message, uint16_t len, CommunicateStruct *communicate)
{
    ZcProtocol *zcProtocol = (ZcProtocol *)message;

    TxQueue_FreeById(communicate->txQueue, zcProtocol->head.id);
}
/*********************************************************************************************

  * @brief  是否为轮询报文
  * @param  mesasge：报文指针
            len：报文长度
            communicate：通讯实例
  * @retval 
  * @remark bool

  ********************************************************************************************/
bool CallBack_HD_isPooling(uint8_t *message, uint16_t len, CommunicateStruct *communicate)
{
    ZcProtocol *zcProtocol = (ZcProtocol *)message;

    switch (communicate->medium)
    {
    case COM_NET:
        timeStamp = zcProtocol->head.timestamp;
        break;
    }

    return (zcProtocol->head.cmd == 00) ? true : false;
}

/*********************************************************************************************

  * @brief  半双工-服务器 接收到轮询处理
  * @param  mesasge：报文指针
            len：报文长度
            communicate：通讯实例
  * @retval 
  * @remark 半双工-从机 接收到轮询处理，将需要的操作填充到发送缓冲
            PS：如果没有需要处理的也要填充轮询回复报文

  ********************************************************************************************/

void CallBack_HDServer_PollHandle(uint8_t *message, uint16_t len, CommunicateStruct *communicate)
{
}

/*********************************************************************************************

  * @brief  其他报文处理
  * @param  mesasge：报文指针
            len：报文长度
            communicate：通讯实例
  * @retval 
  * @remark 在通讯中，全双工/半双工在非轮询报文的处理上差别比较大
            1. 全双工：随便写，不过要注意区分，接收到的是 回复 的命令还是 请求 的命令
            2. 半双工-主机：接收到从机根据轮询发来的操作指令报文，进行处理并回复（主机发送轮询，从机要求主机读取参数）
            3. 半双工-从机：接收到主机根据操作指令回复的报文，下发确认报文（主机发送读取出来的参数，从机发送收到确认）

  ********************************************************************************************/
void CallBack_UnpollMsgHandle(uint8_t *message, uint16_t len, CommunicateStruct *communicate)
{
    switch (communicate->medium)
    {
    case COM_485:
        ZcProtocol_HDSlave_UnpollMsgHandle(message, len, communicate);
        break;
    case COM_24G:
        ZcProtocol_FD_UnpollMsgHandle(message, len, communicate);
        break;
    case COM_NET:
        ZcProtocol_HDMaster_UnpollMsgHandle(message, len, communicate);
        break;
    }
}
