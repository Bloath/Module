/* Includes ------------------------------------------------------------------*/
#include "string.h"

#include "nRF24L01P_API.h"
#include "nRF24L01P_HAL.h"

#include "../../Common/Delay.h"
#include "../../Sys_Conf.h"
/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
uint8_t ADDRESS[ADR_WIDTH] = {0x0F,0xFF,0xFF,0xFF,0xFF};  // 定义一个静态发送地址

/* Private function prototypes -----------------------------------------------*/
void nRF24L01P_SetRxMode();

/* Private functions ---------------------------------------------------------*/
/*********************************************************************************************

  * @brief  nRF24L01 初始化
  * @param  
  * @retval 
  * @remark 

  ********************************************************************************************/
void nRF24L01P_Initialization()
{
  CE_LOW();
  
  nRF24L01P_Write_Reg(W_REG + EN_RXADDR, 0x01);                         // 使能接收通道0
  
  nRF24L01P_Write_Reg(W_REG + RF_CH, 40);         			// 选择射频通道0x40
  nRF24L01P_Write_Reg(W_REG + RF_SETUP, 0x0F);    			// 数据传输率2Mbps，发射功率0dBm，低噪声放大器增益(nRF24L01+忽略该位）
  
  nRF24L01P_Write_Reg(W_REG + SETUP_AW, 0x03);                          // 发送接收地址长度
  
  nRF24L01P_Write_Buf(W_REG + TX_ADDR, ADDRESS, ADR_WIDTH);             // 写入发送地址
  nRF24L01P_Write_Buf(W_REG + RX_ADDR_P0, ADDRESS, ADR_WIDTH);          // 为了应答接收设备，接收通道0地址和发送地址相同
  nRF24L01P_Write_Reg(W_REG + RX_PW_P0, PLOAD_WIDTH);  	                // 接收通道0选择和发送通道相同有效数据宽度，接收时，超过这个个数才能触发中断
  
  nRF24L01P_Write_Reg(W_REG + FEATURE, 0x05);                           // 开启动态接收
  nRF24L01P_Write_Reg(W_REG + DYNPD, 0x01);                             // 使能动态接收通道0
  
  nRF24L01P_Write_Reg(W_REG + CONFIG, 0x3E);      			// CRC使能，16位CRC校验，上电
  nRF24L01P_Write_Reg(W_REG + STATUS, 0xff);  				//清除所有的中断标志位

  //CE_HIGH();
}

/*********************************************************************************************
  * @brief  nrf24L01 接收数据
  * @param  data：   接收缓冲
  * @param  len：   接收缓冲长度 
  * @retval 无
  * @remark 
  ********************************************************************************************/
uint8_t nRF24L01P_Receive(uint8_t *data, uint8_t *len)
{
  uint8_t status = nRF24L01P_Read_Reg(STATUS), i = 0;
  if(status & (1<<6))
  {
    *len = Wireless_ReadRXPayload(data);
    if(*len > 32)
    { return 1; }
    
    nRF24L01P_Write_Reg(STATUS, 0xFF);          //清除标志位
    
    return 0;
    
  }
  return 1;
}

/*********************************************************************************************
  * @brief  nrf24L01 发送数据
  * @param  packet：   接收缓冲
  * @param  len：   接收缓冲长度 
  * @retval 无
  * @remark 
  ********************************************************************************************/
void nRF24L01P_Transimit(uint8_t *packet, uint16_t len)
{
  CE_LOW();                                             // 拉低写入命令
  
  uint8_t controlreg = nRF24L01P_Read_Reg(CONFIG);
  nRF24L01P_Write_Reg(W_REG + CONFIG, controlreg & ~(1<<0) );   // CONFIG 寄存器写入数据，设定为发送模式
  
  FlushTX();					        
  FlushRX();                                            // 清除缓存
  
  WriteTXPayload_NoAck(packet, len);
  CE_HIGH(); 
  
  Delay_ms(2);                                       //启动发送，等待2ms后直接拉低
  CE_LOW();	
}
/*********************************************************************************************
  * @brief  nrf24L01 设置为接收模式
  * @param  packet：   接收缓冲
  * @param  len：   接收缓冲长度 
  * @retval 无
  * @remark 
  ********************************************************************************************/
void nRF24L01P_SetRxMode(void)
{
    uint8_t controlreg = 0;
  
    CE_LOW();
    
    controlreg = nRF24L01P_Read_Reg(CONFIG);
    nRF24L01P_Write_Reg(W_REG + CONFIG, controlreg | 0x01);
    
    FlushTX();
    FlushRX();					//Flush RX
    
    CE_HIGH();					//允许收发	 
}