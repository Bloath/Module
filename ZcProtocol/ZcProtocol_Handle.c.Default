/* Includes ------------------------------------------------------------------*/
#include "stdlib.h"
#include "string.h"

#include "../Sys_Conf.h"
#include "../Common/Array.h"
#include "../Common/Malloc.h"
#include "../Communicate/Communicate_API.h"
#include "ZcProtocol.h"
#include "ZcProtocol_API.h"

#include "../Handle/Global.h"
#include "../Handle/lcd.h"
#include "../Handle/Conf.h"
/* private typedef ------------------------------------------------------------*/
/* private define -------------------------------------------------------------*/
/* private macro --------------------------------------------------------------*/
/* private variables ----------------------------------------------------------*/
/* private function prototypes ------------------------------------------------*/
void ZcProtocol_NetUpload_ValveRecode();
/*********************************************************************************************

  * @brief  拙诚协议=》操作类指令处理
  * @param  protocol：协议指针
  * @param  mesasge：报文指针
            len：报文长度
            communicate：通讯实例
  * @remark nRF24L01 是双向通讯，任意一方的设备都可以发起请求，控制器发起比较多，设备发起比较少
            为了防止出现无限通讯（互相回复），制定如下规则
            1. 控制器发送请求id不允许出现为0的情况
            2. 阀门和报警器主动发起时，id为0，控制器在此情况下才会回复，否则不回复
               双向的命令有：获取设备属性 => 控制器同步 或者 手动开关阀
               单项的命令有：设备报警、控制器下发开关阀、

  ********************************************************************************************/
void ZcProtocol_FD_UnpollMsgHandle(uint8_t *message, uint16_t len, CommunicateStruct *communicate)
{          
  uint8_t data[10];
  ZcProtocol *zcProtocol = (ZcProtocol*)message;
  uint8_t broadcastAddress[7] = {0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1};
  
  if(zcProtocol->head.control == 0x41 && zcProtocol->head.cmd == ZC_CMD_ADDRESS)
  { return; }
  
  /* 地址过滤，非搜索以及本机地址不处理 */
  BoolEnum isSearchAddress = (memcmp(zcProtocol->head.address, broadcastAddress, 7) == 0)? TRUE:FALSE;
  BoolEnum isSelfAddress = (memcmp(zcProtocol->head.address, conf.address, 7) == 0)? TRUE:FALSE;
  
  if(isSearchAddress == FALSE && isSelfAddress == FALSE)
  { return ; }
  
//  if((zcProtocol->head.control & 0x7F) != 0x41)
//  { return; }
   
  global.communicateTime = realTime;
  LCD_WriteBit(LCD_TAG_WIREKESS, TRUE, FALSE);
  
  /* 如果id为0，为下位机主动发送，直接回复，而后处理数据 */
  if(zcProtocol->head.id == 0)
  { 
    data[0] = 0;
    ZcProtocol_Response(ZcSource_24G, zcProtocol, data, zcProtocol->head.length - ZC_UNDATA_LEN); 
  }
  
  switch(zcProtocol->head.cmd)                          
  { 
  /* 地址域，上位机发请求, 需要回复，每两秒响应一次 */
  case ZC_CMD_ADDRESS:
    if(zcProtocol->head.length > 0x13 && zcProtocol->head.control == 0x40)
    {
      if(isSelfAddress == FALSE)
      { break; }
      
      memcpy(conf.address, &zcProtocol->data, 7);
      Conf_Write();
      memcpy(zcPrtc.head.address, &zcProtocol->data, 7);
    }
    ZcProtocol_Response(ZcSource_24G, zcProtocol, zcPrtc.head.address, 7);      //直接回复
    break;
    
  /* 设备属性，双向 */
  case ZC_CMD_DEVICE_ATTR:
    Global_ValveGetCountDown(*(uint32_t*)&zcProtocol->data);            // 根据倒计时切换状态
    
    if(*(uint32_t*)&zcProtocol->data > 0)
    { LCD_WriteBackLight(*(uint32_t*)&zcProtocol->data); }              // 在开阀时背光显示
    
    global.error.flag &= CONTROL_ERROR_BITS;
    global.error.flag |= *(uint32_t *)(&zcProtocol->data + 4);              // 同步错误
    
    int16_t pressure = *(int16_t*)((uint8_t *)&zcProtocol->data + 8);
    global.display.pressure = (pressure < 0)? 0: pressure;
    break;
    
  /* 阀门开关操作，控制器发请求 */
  case ZC_CMD_VALVE_OPRT:
    Global_ValveGetCountDown(*(uint32_t*)&zcProtocol->data);            // 根据倒计时切换状态
    LCD_WriteBackLight(*(uint32_t*)&zcProtocol->data);
    
    if(*(uint32_t*)&zcProtocol->data == 0 && global.valve.realOpenTime > 152000000)
    {
      /* 向服务器发送当前开关阀时间 */
      ZcProtocol_NetUpload_ValveRecode();
      global.valve.realOpenTime = 0; // 防止重复发送
    }
    break;
      
  case ZC_CMD_ALARM:
    global.error.flag &= CONTROL_ERROR_BITS;
    global.error.flag |= *(uint32_t *)&zcProtocol->data;              // 同步错误
    global.error.flagCache &= global.error.flag;                // 缓存跟进，阀门不会重复发送错误。收到错误上传，则全部重新处理
    break;
  /* 并非操作指令，返回1 */
  default:
    break;
  }
  
}
/*********************************************************************************************

  * @brief  拙诚协议 => wifi协议
  * @param  mesasge：报文指针
            len：报文长度
            communicate：通讯实例
  * @retval 
  * @remark 半双工主机 非轮询处理（阀门485，控制器wifi）
            1、接收从机（服务器）发来的查询或设置报文 => 通过该函数处理，处理好上发即可
            2、接收从机（服务器）发来的回复轮询报文 => 自动处理
            3、接收从机（服务器）发来的确认报文 => 自动处理，需要做清除发送缓冲相应数据即刻

  ********************************************************************************************/
void ZcProtocol_HDMaster_UnpollMsgHandle(uint8_t *message, uint16_t len, CommunicateStruct *communicate)
{
  ZcProtocol *zcProtocol = (ZcProtocol*)message;
  BoolEnum isSet = ((zcProtocol->head.length - ZC_UNDATA_LEN) == 1)? FALSE:TRUE;
  uint8_t *data;
  
  switch(zcProtocol->head.cmd) 
  {
  /* 开关阀操作 */
  case ZC_CMD_VALVE_OPRT:
    if(isSet == TRUE)
    { Global_ValveSetCountDown(*(uint32_t*)&zcProtocol->data); }
    else
    { 
      data = Malloc(4);
      *(uint32_t *)data = global.valve.residualTime();
      ZcProtocol_Response(communicate->tag, zcProtocol, data, 4);
      Free(data);
    }
    break;
  }

}
/*********************************************************************************************

  * @brief  拙诚协议 => 485协议处理
  * @param  mesasge：报文指针
            len：报文长度
            communicate：通讯实例
  * @retval 
  * @remark 半双工从机 非轮询处理（控制器485）
            1. 接收主机发送来的轮询处理：通过setPoll填充报文
            2. 接收主机发来的响应报文，处理完成后发送确认报文

  ********************************************************************************************/
extern CommunicateStruct communicate_485,communicate_WIFI,communicate_24G;
void ZcProtocol_HDSlave_UnpollMsgHandle(uint8_t *message, uint16_t len, CommunicateStruct *communicate)
{
  uint8_t *data = 0;  
  uint8_t temp8 = 0;
  ArrayStruct *responseData = NULL;
  ZcProtocol *zcProtocol = (ZcProtocol*)message;
  
  LCD_WriteBit(COM_TAG, TRUE, FALSE);
  
  switch(zcProtocol->head.cmd)                          
  { 
  /* 修改地址 */
  case ZC_CMD_ADDRESS:
    if(zcProtocol->head.length > 0x13)
    {
      memcpy(conf.address, &zcProtocol->data, 7);
      Conf_Write();
      memcpy(zcPrtc.head.address, &zcProtocol->data, 7);
    }
    responseData = Array_New(7);
    memcpy(responseData->packet, conf.address, 7);
    break;
    
  /* 算法信息，则直接通过网络上传 */
  case ZC_CMD_ANALYSE_INFO:
    global.measure.single += *(uint32_t *)&zcProtocol->data;
    global.measure.total += *(uint32_t *)&zcProtocol->data;
    
    break;
  case 0x86:
    TxQueue_Add(communicate_WIFI.txQueue, message, len, TX_MULTI_MC);
    break;
  
  /* 设备属性，双向 */
  case ZC_CMD_DEVICE_ATTR:
    Global_ValveGetCountDown(*(uint32_t*)&zcProtocol->data);            // 根据倒计时切换状态
    if(*(uint32_t*)&zcProtocol->data > 0)
    { LCD_WriteBackLight(*(uint32_t*)&zcProtocol->data); }              // 在开阀时背光显示
    break;
    
  /* 阀门开关操作，控制器发请求 */
  case ZC_CMD_VALVE_OPRT:
    Global_ValveGetCountDown(*(uint32_t*)&zcProtocol->data);            // 根据倒计时切换状态
    LCD_WriteBackLight(*(uint32_t*)&zcProtocol->data);
    responseData = Array_New(4);
    memcpy(responseData->packet, &zcProtocol->data, 4);
    
    if(*(uint32_t*)&zcProtocol->data == 0 && global.valve.realOpenTime > 152000000)
    {
      /* 向服务器发送当前开关阀时间 */
      ZcProtocol_NetUpload_ValveRecode();
      
      /* 关阀发送计量 */      
      data = (uint8_t *)Malloc(25);
      *(uint32_t *)(data + 0) = global.measure.single / 10;
      ZcProtocol_Request(ZcSource_Net, ZC_CMD_MEASURE_ATTR,  data, 25, TRUE, TX_MULTI_MC);
      global.measure.single = 0;
      Free(data);
      
      global.valve.realOpenTime = 0; // 防止重复发送
    }
    break;
    
  case ZC_CMD_ALARM:
    break;
  
  /* 收到 */
  default:
    break;
  }
  
  /* 回复报文，非轮询情况下，不管什么一律恢复确认报文 */
  zcProtocol->head.cmd = 0xFF;
  if(responseData != NULL)
  { 
    ZcProtocol_Response(communicate->tag, zcProtocol, responseData->packet, responseData->length);      //直接回复
    Array_Free(responseData);
  }    
  else
  { ZcProtocol_Response(communicate->tag, zcProtocol, &temp8, 1);}
  
}
/*********************************************************************************************

  * @brief  拙诚协议 => 网络上传 => 开关阀记录
  * @param  
  * @retval 
  * @remark 开阀+关阀时间，这两个时间在Global_ValveGetCountDown函数中赋予时间戳

  ********************************************************************************************/
void ZcProtocol_NetUpload_ValveRecode()
{
    /* 向服务器发送当前开关阀时间 */
    uint8_t *data = (uint8_t *)Malloc(8);
    *(uint32_t *)(data + 0) = global.valve.realOpenTime;
    *(uint32_t *)(data + 4) = global.valve.realCloseTime;
    
    ZcProtocol_Request(ZcSource_Net, ZC_CMD_VALVE_RECORD, data, 8, TRUE, TX_MULTI_MC);
    Free(data);  
}
