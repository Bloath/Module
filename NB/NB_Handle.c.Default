/* Includes ------------------------------------------------------------------*/
#include "NB.h"
#include "Handle/Communication.h"
/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
extern char *nbOcSet[];
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

/*********************************************************************************************

  * @brief  
  * @param   
  * @return 
  * @remark 

  ********************************************************************************************/
 void NB_OC_HandleBeforeNetting()
 {
    NB_SendATCommandList(nbOcSet);
 } 

/*********************************************************************************************

  * @brief  
  * @param   
  * @return 
  * @remark 

  ********************************************************************************************/
 void NB_OC_ReceiveHandle(char *message, uint16_t len)
 {   
    if (nb._lastProcess == Process_Start && strstr(message, "OK"))
    {   NB_SetProcess(Process_Run);    }
   
    // 接收到日期 -> 正式进入发送状态
    char *location = strstr(message, "+CCLK");
    if (location != NULL)
    {
        CalendarStruct calendar;
        calendar.year = 2000 + (location[6] - 0x30) * 10 + location[7] - 0x30;
        calendar.month = (location[9] - 0x30) * 10 + location[10] - 0x30;
        calendar.day = (location[12] - 0x30) * 10 + location[13] - 0x30;
        calendar.hour = (location[15] - 0x30) * 10 + location[16] - 0x30;
        calendar.min = (location[18] - 0x30) * 10 + location[19] - 0x30;
        calendar.sec = (location[21] - 0x30) * 10 + location[22] - 0x30;
        //uint8_t timeZone = (location[24] - 0x30) * 10 + location[25] - 0x30;
        timeStampCounter = Calendar2TimeStamp(&calendar, 0);
    }
    
     // 接收到数据
    if (strstr(message, "+NNMI") != NULL)
    {
        nb._errorCounter = 0;

        char *tempPointer = (char *)message;
        bool isNeedCheck = false;
        for (uint8_t i = 0; i < 10; i++)
        {
            tempPointer = strstr(tempPointer, "+NNMI"); // 找到NMI
            if (tempPointer == NULL)
            {   break;  } // 没找到则直接退出

            /* 有可能发生字符串黏连的情况，则通过不同方式进行切割
               有换行符，则使用String_CutByChr，没有，则直接找到,后面字符作为指针 */
            char *msgStr = NULL;
            if (strstr(tempPointer, "\r") == NULL)
            {
                msgStr = (char *)((uint32_t)strstr(tempPointer, ",") + 1);
                isNeedCheck = false;
            }
            else
            {
                msgStr = String_CutByChr(tempPointer, ',', '\r');
                tempPointer = strstr(tempPointer, "\r");
                isNeedCheck = true;
            }
    
            // 收到AAA000,则清除最后一条回复
            if(strstr(msgStr, "AAA000") != NULL)
            {   TxQueue_FreeByFunc(nb.txQueueService, Communicate_NbOCClearTxBlockFunction, &(nb.txQueueService->_lastIndex)); }
            else
            {
                uint8_t *msg = NULL;
                int count = HexString2Msg(&msg, msgStr + 10, 0);                    // 转换为字节数组格式
                if(count > 0)
                {   
                    RxQueue_Add(nb.rxQueueService, msg, count, true);        // 填充到接收缓冲当中
                    
                    // 只有在抓换成功后，才回复确认
                    msgStr[1] = 0x33;
                    memset(msgStr + 6, 0x30, 4);
                    msgStr[10] = 0;
                    char *response = (char*)Malloc(32);
                    if(response != NULL)
                    {
                        strcat(response, "AT+NMGS=5,");
                        strcat(response, msgStr);
                        strcat(response, "\r\n");
                        NB_StringTrans(response);
                        Free(response);
                    }
                }
            }
            Free(msgStr);
            
            if (isNeedCheck == false)
            {   break;  }
        }
    }
 }
/*********************************************************************************************

  * @brief  NB_DataPackage
  * @param  block
  * @retval 无
  * @remark -1 Malloc失败

  ********************************************************************************************/
int NB_OC_PacketPackage(TxBaseBlockStruct *block, void *param, PacketStruct *packet)//需要处理Malloc
{
    /* 申请内存
       AT+NMGS= 8位
       长度+逗号 4位
       \r\n 2位      */
    uint16_t totalLen = 40 + block->length * 4;
    char *msg = (char *)Malloc(totalLen);
    if(msg == NULL)
    {   return -1;  }
    
    if(block->length == 69)
    {   totalLen = 1;   }
    
    uint8_t prefix[3] = {1, (uint8_t)((block->length * 2) >> 8), (uint8_t)(block->length * 2)};
    
    /* 拼接指令协议 */
    strcat(msg, "AT+NMGS=");                            // AT头
    Uint2String(msg, block->length * 2 + 3);            // 填充数字
    strcat(msg, ",");                                   // 填充，
    Msg2String(msg, prefix, 3);                                
    Msg2HexString(msg, block->message, block->length);  // 填充报文
    strcat(msg, "\r\n");                                // 填充换行

    packet->data = (uint8_t *)msg;
    packet->length = strlen(msg);                       // 将打包好的数据指向packet，后面会自己free
    
    return 0;
}
/*********************************************************************************************

  * @brief  
  * @param   
  * @return 
  * @remark 

  ********************************************************************************************/
void NB_Http_StartConnect()
 {
    char *httpCreate = NULL;
    httpCreate = (char *)Malloc(64);
    strcat(httpCreate, "AT+HTTPCREATE=\"http://");
    strcat(httpCreate, nb.host);
    strcat(httpCreate, ":");
    strcat(httpCreate, nb.port);
    strcat(httpCreate, "\"\r\n");
    NB_StringTrans(httpCreate);
    Free(httpCreate);
 } 



/*********************************************************************************************

  * @brief  
  * @param   
  * @return 
  * @remark 

  ********************************************************************************************/
void NB_Http_ReceiveHandle(char *message, uint16_t len)
 {
   char *location = NULL, *temp = NULL;
   
     // 是否正常打开SOCKET
    if (nb._lastProcess == Process_Start)
    {
        if(strstr(message, "ERROR"))
        {   NB_ErrorHandle(NBError_ConnectError);   }
        else
        {
            location = strstr(message, "\r\n\r\nOK\r\n");
            location -= 1;
            if( *location >= 30 && *location <= 0x39)
            {
                nb.socketId = *location - 0x30;
                NB_SetProcess(Process_Run);
            }
            else
            {   NB_ErrorHandle(NBError_ConnectError);  }
        }
        return;
    }
    
    // 获取到内容则为+HTTPNMIC，获取到头则为+HTTPNMIH
    location = strstr(message, "+HTTPNMIC");
    if (location != NULL)
    {
        nb._errorCounter = 0;
        location = strstr(message, "\n68");
            
        /* 回复body提取可用字符串 */
        if (location != NULL)
        {   
            location += 1;                 
            
            /* 找到换行符，将换行符改为结束符，再对报文进行转换 */
            temp = strstr(location, "16\r\n");
            if(temp != NULL)
            {   temp[2] = '\0';   }
            
            uint8_t *packet = NULL;
            int count = String2Msg(&packet, location, 0);
            if (count > 0)
            {   RxQueue_Add(nb.rxQueueService, packet, count, true);     }
        }     
        else
        {   NB_ErrorHandle(NbError_TxFail);   }
        return;
    }
    
        /* 处于发送状态
     出现Error时，有可能并未入网，ERROR出现10次重启模块 */
    if (nb._process == Process_Run)
    {
        // 在数据发送处理部分接收到error，需要复位
        if (strstr(message, "ERROR") != NULL || strstr(message, "HTTPERR") != NULL)
        {
            nb._errorCounter++;

            // 发现错误次数比较多，（HTTP CREATE是可以打开的，发送才会出现ERROR）
            if ((nb._errorCounter / 4) >= 2)
            {   NB_ErrorHandle(NbError_NeedReset); }
            else if ((nb._errorCounter % 4) == 3)
            {   NB_ErrorHandle(NbError_TxFail); }
        }
    }
 }
/*********************************************************************************************

  * @brief  NB_DataPackage
  * @param  block
  * @retval 无
  * @remark 

  ********************************************************************************************/
int NB_Http_PacketPackage(TxBaseBlockStruct *block, void *param, PacketStruct *packet)//需要处理Malloc
{
    /* 申请内存
       AT+NMGS= 8位
       长度+逗号 4位
       \r\n 2位      */
    uint16_t totalLen = 40 + block->length * 2;
    char *msg = (char *)Malloc(totalLen);

    /* 拼接指令协议 */
    strcat(msg, "AT+HTTPSEND=");                        // AT头
    Uint2String(msg, nb.socketId);                      // 填充数字
    strcat(msg, ",0,");                                 // 填充，
    strcat(msg, "/communication?message=");             // 填充path
    Msg2String(msg, block->message, block->length);     // 填充报文
    strcat(msg, "\r\n");                                // 填充换行

    packet->data = (uint8_t *)msg;
    packet->length = strlen(msg);                       // 将打包好的数据指向packet，后面会自己free
    
    return 0;
}