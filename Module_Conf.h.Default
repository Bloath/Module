#ifndef _MODULE_CONF_H_
#define _MODULE_CONF_H_

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stdint.h"
#include "string.h"
#include "stdlib.h"
#include "stdbool.h"
#include "stdio.h"
#include "Time.h"

#include "Module/HalDefine/stm32_HalDefine.h"
#include "HardWare/HardWare.h"
#include "ThirdLibrary/cJSON.h"

/* Public typedef ------------------------------------------------------------*/
enum ProcessEnum
{
    Process_Init = 0,
    Process_Idle,
    Process_Start,
    Process_Run,
    Process_RunWait,
    Process_BeforeFinish,
    Process_Finish,
    Process_LongWait,
    Process_Wait,
    Process_Reset,
    Process_ResetWait,
    Process_OrderAt,
    Process_OrderAtWait,
    Process_ErrorTrigged,
    Process_ErrorHandle,
    Process_Lock,
};

struct ProcessStruct
{ 
    enum ProcessEnum current;
    enum ProcessEnum last;
    uint32_t __time;
};

/* Public variables ----------------------------------------------------------*/
extern uint32_t realTimeCounter, timeStampCounter;
/* Public define -------------------------------------------------------------*/
#define MODULE_DEBUG    1   
#define SYSTIME uwTick
//#define realTime (*(uint32_t *)(0x4B0))
#define REALTIME (realTimeCounter)
#define TIMESTAMP (timeStampCounter)

#define SECONDS_YEAR   31536000L
#define SECONDS_MONTH   2592000L
#define SECONDS_DAY    86400L
#define SECONDS_HOUR   3600L
#define SECONDS_MIN    60L

#define DATA_PREFIX 

#define CPU_FREQUENCY   48000000
#define CPU_1US_COUNT   (CPU_FREQUENCY / 1000000)

#define LOG_LEVEL_DEBUG     0
#define LOG_LEVEL_INFO      1
#define LOG_LEVEL_WARNING   2
#define LOG_LEVEL_ERROR     3
#define LOG_LEVEL   LOG_LEVEL_INFO


/* Public macro --------------------------------------------------------------*/
#define PROCESS_CHANGE(processObj, process)     \
    {                                           \
        processObj.last = processObj.current;   \
        processObj.current = process;           \
    }
    
#define PROCESS_CHANGE_WITH_TIME(processObj, process, time)     \
    {                                                           \
        processObj.last = processObj.current;                   \
        processObj.current = process;                           \
        processObj.__time = time;                               \
    }

#define PROCESS_RETURN(processObj)                              \
    {                                                           \
        enum ProcessEnum __processTemp;                         \
        __processTemp = processObj.current;                     \
        processObj.current = processObj.last;                   \
        processObj.last = __processTemp;                        \
    }

#define PROCESS_RETURN_WITH_TIME(processObj, time)              \
    {                                                           \
        enum ProcessEnum __processTemp;                         \
        __processTemp = processObj.current;                     \
        processObj.current = processObj.last;                   \
        processObj.last = __processTemp;                        \
        processObj.__time = time;                               \
    }
    
/* Public function prototypes ------------------------------------------------*/

#endif
